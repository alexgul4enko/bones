(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{151:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return u}));var s=t(1),r=t(6),c=(t(0),t(169)),a={id:"access_about",title:"Access",sidebar_label:"Ussage"},i={id:"access/access_about",title:"Access",description:"React provider to define user permission levels and then use it to standardize conditional rendering.",source:"@site/docs/access/about.md",permalink:"/bones/docs/access/access_about",editUrl:"https://github.com/alexgul4enko/bones/tree/master/docs/docs/access/about.md",sidebar_label:"Ussage",sidebar:"accessSitebar"},l=[{value:"<del>Ussage</del>",id:"ussage",children:[{value:"<del>1. Define user permission levels</del>",id:"1-define-user-permission-levels",children:[]},{value:"<del>2. Describe user levels</del>",id:"2-describe-user-levels",children:[]},{value:"<del>3. Create provider</del>",id:"3-create-provider",children:[]},{value:"<del>4. Wrap your app with AppPermissions</del>",id:"4-wrap-your-app-with-apppermissions",children:[]}]},{value:"<del>CheckAccess</del>",id:"checkaccess",children:[{value:"<del>Button that is visible only for admin user</del>",id:"button-that-is-visible-only-for-admin-user",children:[]},{value:"<del>Button that is visible only for admin user, otherwise link to become admin</del>",id:"button-that-is-visible-only-for-admin-user-otherwise-link-to-become-admin",children:[]},{value:"<del>Button that is visible for both admin or super user</del>",id:"button-that-is-visible-for-both-admin-or-super-user",children:[]},{value:"<del>Button that is visible for super admin user</del>",id:"button-that-is-visible-for-super-admin-user",children:[]}]},{value:"<del>useHasAccess</del>",id:"usehasaccess",children:[]},{value:"<del>usePermissions</del>",id:"usepermissions",children:[]}],o={rightToc:l};function u(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(s.a)({},o,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("p",null,"React provider to define user permission levels and then use it to standardize conditional rendering."),Object(c.b)("h2",{id:"ussage"},Object(c.b)("del",{parentName:"h2"},"Ussage")),Object(c.b)("h3",{id:"1-define-user-permission-levels"},Object(c.b)("del",{parentName:"h3"},"1. Define user permission levels")),Object(c.b)("p",null,"Firstly you need to create constances with user levels names. "),Object(c.b)("pre",null,Object(c.b)("code",Object(s.a)({parentName:"pre"},{className:"language-javascript"}),"export const F_PROTECTED = 'F_PROTECTED' \nexport const F_UNAUTHORISED = 'F_UNAUTHORISED'\nexport const F_ADMIN = 'F_ADMIN'\nexport const F_SUPER_USER = 'F_SUPER_USER'\n")),Object(c.b)("h3",{id:"2-describe-user-levels"},Object(c.b)("del",{parentName:"h3"},"2. Describe user levels")),Object(c.b)("p",null,"To descripe permission rules you might need to use ",Object(c.b)("del",{parentName:"p"},"composeAccess")," function"),Object(c.b)("pre",null,Object(c.b)("code",Object(s.a)({parentName:"pre"},{className:"language-js",metastring:'title="acessLevels.ts"',title:'"acessLevels.ts"'}),"import { composeAccess } from '@cranium/access'\nimport get from 'lodash/get'\n\nexport const acessLevels =  composeAccess(\n  //if there is user id then user is authorized and has access to portal.\n  (props) => get(props, 'user.id') ? F_PROTECTED : F_UNAUTHORISED,\n  //define if user is admin\n  (props) => get(props, 'user.is_admin') ? F_ADMIN : null,\n  //define if user is super user\n  (props) => get(props, 'user.is_super_user') ? F_SUPER_USER : null,\n)\n")),Object(c.b)("h3",{id:"3-create-provider"},Object(c.b)("del",{parentName:"h3"},"3. Create provider")),Object(c.b)("p",null,"Create your own provider and pass all props that are necessary to calculate user permission"),Object(c.b)("pre",null,Object(c.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"import { AccessProvider } from '@cranium/access'\nimport { acessLevels } from './acessLevels.ts'\n\nfunction AppPermissions({ children, session }) {\n  //as an example your local Hook to get user info\n  const user = useGetUserInfo()\n  return (\n    <AccessProvider acessLevels={acessLevels} user={user}>\n      {children}\n    </AccessProvider>\n  )\n}\n")),Object(c.b)("h3",{id:"4-wrap-your-app-with-apppermissions"},Object(c.b)("del",{parentName:"h3"},"4. Wrap your app with AppPermissions")),Object(c.b)("pre",null,Object(c.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"function Root() {\n  return (\n    <AppPermissions>\n      <App/>\n    </AppPermissions>\n  )\n}\n")),Object(c.b)("h2",{id:"checkaccess"},Object(c.b)("del",{parentName:"h2"},"CheckAccess")),Object(c.b)("p",null,"React Component that wraps nested components and renders children only in case user has permissions to view it, based on ",Object(c.b)("del",{parentName:"p"},"access levels")),Object(c.b)("p",null,"Props:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("del",{parentName:"li"},"access [string, string[]]"),". Access level or list of access levels to check."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("del",{parentName:"li"},"fallback ","[ReactNode]"),". Element to render in case user does not has sccess level. Default ",Object(c.b)("inlineCode",{parentName:"li"},"null")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("del",{parentName:"li"},"operator ","['ALL' | 'SOME']"),". Operator to controll multiple access level rules. ",Object(c.b)("inlineCode",{parentName:"li"},"ALL")," user needs to have all access levels, ",Object(c.b)("inlineCode",{parentName:"li"},"SOME")," - at least 1. Default ",Object(c.b)("inlineCode",{parentName:"li"},"SOME"),".")),Object(c.b)("h3",{id:"button-that-is-visible-only-for-admin-user"},Object(c.b)("del",{parentName:"h3"},"Button that is visible only for admin user")),Object(c.b)("pre",null,Object(c.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"import { CheckAccess } from '@cranium/access'\n\nfunction DeleteUSerButton() {\n  return (\n    <CheckAccess access={F_ADMIN}>\n      <button>Delete user</button>\n    </CheckAccess>\n  )\n}\n")),Object(c.b)("h3",{id:"button-that-is-visible-only-for-admin-user-otherwise-link-to-become-admin"},Object(c.b)("del",{parentName:"h3"},"Button that is visible only for admin user, otherwise link to become admin")),Object(c.b)("pre",null,Object(c.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"import { CheckAccess } from '@cranium/access'\n\nfunction DeleteUSerButton() {\n  return (\n    <CheckAccess \n      access={F_ADMIN}\n      fallback={(<Link to=\"become_admin\">become admin</Link>)}\n    >\n      <button>Delete user</button>\n    </CheckAccess>\n  )\n}\n\n")),Object(c.b)("h3",{id:"button-that-is-visible-for-both-admin-or-super-user"},Object(c.b)("del",{parentName:"h3"},"Button that is visible for both admin or super user")),Object(c.b)("pre",null,Object(c.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"import { CheckAccess } from '@cranium/access'\n\nfunction DeleteUSerButton() {\n  return (\n    <CheckAccess access={[F_ADMIN, F_SUPER_USER]}>\n      <button>Delete user</button>\n    </CheckAccess>\n  )\n}\n\n")),Object(c.b)("h3",{id:"button-that-is-visible-for-super-admin-user"},Object(c.b)("del",{parentName:"h3"},"Button that is visible for super admin user")),Object(c.b)("pre",null,Object(c.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"import { CheckAccess } from '@cranium/access'\n\nfunction DeleteUSerButton() {\n  return (\n    <CheckAccess access={[F_ADMIN, F_SUPER_USER]} operator=\"ALL\">\n      <button>Delete user</button>\n    </CheckAccess>\n  )\n}\n\n")),Object(c.b)("h2",{id:"usehasaccess"},Object(c.b)("del",{parentName:"h2"},"useHasAccess")),Object(c.b)("p",null,"React HOOK to check  permissions based on ",Object(c.b)("del",{parentName:"p"},"access levels")),Object(c.b)("p",null,"API:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("del",{parentName:"li"},"acessLevels [string, string[]]"),". Access level or list of access levels to check."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("del",{parentName:"li"},"operator ","['ALL' | 'SOME']"),". Operator to controll multiple access level rules. ",Object(c.b)("inlineCode",{parentName:"li"},"ALL")," user needs to have all access levels, ",Object(c.b)("inlineCode",{parentName:"li"},"SOME")," - at least 1. Default ",Object(c.b)("inlineCode",{parentName:"li"},"SOME"),".")),Object(c.b)("pre",null,Object(c.b)("code",Object(s.a)({parentName:"pre"},{className:"language-ts"}),"useHasAccess(acessLevels: string | string[], operator: 'ALL' | 'SOME' = 'SOME'): boolean\n")),Object(c.b)("pre",null,Object(c.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"import { useHasAccess } from '@cranium/access'\n\nfunction OnlyAdminUser() {\n  return useHasAccess(F_ADMIN) ? <HidenComponent/> : null\n}\n\n")),Object(c.b)("pre",null,Object(c.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"import { useHasAccess } from '@cranium/access'\n\nfunction AdminOrSuperUser() {\n  return useHasAccess([F_ADMIN, F_SUPER_USER]) ? <HidenComponent/> : null\n}\n\n")),Object(c.b)("pre",null,Object(c.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"import { useHasAccess } from '@cranium/access'\n\nfunction AdminAndSuperUser() {\n  return useHasAccess([F_ADMIN, F_SUPER_USER], 'ALL') ? <HidenComponent/> : null\n}\n\n")),Object(c.b)("h2",{id:"usepermissions"},Object(c.b)("del",{parentName:"h2"},"usePermissions")),Object(c.b)("p",null,"React HOOK that return Set of all AccessLevels"),Object(c.b)("pre",null,Object(c.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"import { usePermissions } from '@cranium/access'\n\nfunction AdminAndSuperUser() {\n  const premissions =  usePermissions()\n}\n\n")))}u.isMDXComponent=!0},169:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var s=t(0),r=t.n(s);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,s,r=function(e,n){if(null==e)return{};var t,s,r={},c=Object.keys(e);for(s=0;s<c.length;s++)t=c[s],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(s=0;s<c.length;s++)t=c[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=r.a.createContext({}),u=function(e){var n=r.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i({},n,{},e)),t},b=function(e){var n=u(e.components);return r.a.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=Object(s.forwardRef)((function(e,n){var t=e.components,s=e.mdxType,c=e.originalType,a=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),b=u(t),d=s,m=b["".concat(a,".").concat(d)]||b[d]||p[d]||c;return t?r.a.createElement(m,i({ref:n},o,{components:t})):r.a.createElement(m,i({ref:n},o))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var c=t.length,a=new Array(c);a[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var o=2;o<c;o++)a[o]=t[o];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);