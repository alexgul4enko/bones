(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{152:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return l})),r.d(t,"metadata",(function(){return b})),r.d(t,"rightToc",(function(){return o})),r.d(t,"default",(function(){return u}));var n=r(1),a=r(6),c=(r(0),r(159)),l={id:"usequery",title:"useQuery",sidebar_label:"useQuery"},b={id:"resources/graphql/usequery",title:"useQuery",description:"## ~~useQuery~~",source:"@site/docs/resources/graphql/useQuery.md",permalink:"/bones/docs/resources/graphql/usequery",editUrl:"https://github.com/alexgul4enko/bones/tree/master/docs/docs/resources/graphql/useQuery.md",sidebar_label:"useQuery",sidebar:"resourcesSitebar",previous:{title:"navigationToProps",permalink:"/bones/docs/resources/resource_navigationToProps"},next:{title:"usePrefetchQuery",permalink:"/bones/docs/resources/graphql/usePrefetchQuery"}},o=[{value:"<del>useQuery</del>",id:"usequery",children:[{value:"<del>query</del>",id:"query",children:[]},{value:"<del>options</del>",id:"options",children:[]}]}],s={rightToc:o};function u(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},s,r,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"usequery"},Object(c.b)("del",{parentName:"h2"},"useQuery")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"useQuery(query, options)\n")),Object(c.b)("h3",{id:"query"},Object(c.b)("del",{parentName:"h3"},"query")),Object(c.b)("p",null,"GraphQL query "),Object(c.b)("p",null,"Queries could be defined in several ways: "),Object(c.b)("ol",null,Object(c.b)("li",{parentName:"ol"},"Using ",Object(c.b)("inlineCode",{parentName:"li"},"@apollo/client"))),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"import { gql } from '@apollo/client';\n\nconst GET_DOGS = gql`\n  query Dogs {\n    dogs {\n      id\n      breed\n    }\n  }\n`;\n")),Object(c.b)("ol",{start:2},Object(c.b)("li",{parentName:"ol"},"using babel plugin ",Object(c.b)("inlineCode",{parentName:"li"},"import-graphql"))),Object(c.b)("p",null,"babel.config.js"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"{\n    plugins: ['import-graphql']\n}\n")),Object(c.b)("p",null,"dogs.graphql"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"query Dogs {\n    dogs {\n      id\n      breed\n    }\n  }\n")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"import DOGS from './dogs.graphql'\nimport { useQuery } from '@cranium/resource'\n\nfunction Dogs(){\n   const { request, data, isLoading, errors, filters } = useQuery(DOGS)\n   ...\n}\n")),Object(c.b)("h3",{id:"options"},Object(c.b)("del",{parentName:"h3"},"options")),Object(c.b)("p",null,"Object with additional configurations"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Property"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"type"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"reducer"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"namespace"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"forceUpdates"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"boolean")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"destroyOnUnmount"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"boolean")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"queries"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Array","[String]")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"parseErrors"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string or function")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"parseValue"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string or function")))),Object(c.b)("p",null,"So in general it has same configs as ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/bones/docs/resources/connect_resources#resource"}),"ConnectResources")," "),Object(c.b)("h4",{id:"namespace"},Object(c.b)("del",{parentName:"h4"},"namespace")),Object(c.b)("p",null,"By default namespace will be used as query name (camellCased) "),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"query Dogs {\n    dogs {\n      id\n      breed\n    }\n  }\n")),Object(c.b)("p",null,"In this case ",Object(c.b)("inlineCode",{parentName:"p"},"namespace")," is ",Object(c.b)("del",{parentName:"p"},"dogs")),Object(c.b)("h4",{id:"queries"},Object(c.b)("del",{parentName:"h4"},"queries")),Object(c.b)("p",null,"By default queries will be automatically generated from graphql"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"query Dogs ($first: Int, $cursor: String ) {\n    dogs {\n        edges {\n            node {\n                id\n                breed \n            }\n        }\n    }\n  }\n")),Object(c.b)("p",null,"In this case it will automatically generate ",Object(c.b)("inlineCode",{parentName:"p"},"queries")," as ",Object(c.b)("inlineCode",{parentName:"p"},'["first","cursor"]'),". And then you can use this values from ",Object(c.b)("inlineCode",{parentName:"p"},"filters")),Object(c.b)("h4",{id:"parsevalue"},Object(c.b)("del",{parentName:"h4"},"parseValue")),Object(c.b)("p",null,"In case "),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"query Dogs ($first: Int, $cursor: String ) {\n    dogs {\n        edges {\n            node {\n                id\n                breed \n            }\n        }\n    }\n  }\n")),Object(c.b)("p",null,"GraphQl responce in most cases has lot of nestings. To make data more simple, you can use parseValue option.\nIn case ",Object(c.b)("del",{parentName:"p"},"parseValue")," is ",Object(c.b)("del",{parentName:"p"},"String")," it will just use `lodash.get``` function to remove root nesting from graphQL responce"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"import DOGS from './dogs.graphql'\nimport { useQuery } from '@cranium/resource'\n\nfunction Dogs(){\n   const { request, data } = useQuery(DOGS, {parseValue: 'data.dogs'})\n   ...\n}\n")),Object(c.b)("p",null,"Or you can provide whatever your custom function to transform responce"),Object(c.b)("h4",{id:"parseerrors"},Object(c.b)("del",{parentName:"h4"},"parseErrors")),Object(c.b)("p",null,Object(c.b)("del",{parentName:"p"},"parseErrors")," has same API as ",Object(c.b)("del",{parentName:"p"},"parseValue"),". And this function executes before ",Object(c.b)("del",{parentName:"p"},"parseValue"),". It could be string or functoin and in general it is needed to convert GraphQL responce (that is always success) to error. This function could be usefull while working with forms."))}u.isMDXComponent=!0},159:function(e,t,r){"use strict";r.d(t,"a",(function(){return p})),r.d(t,"b",(function(){return O}));var n=r(0),a=r.n(n);function c(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function b(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){c(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=a.a.createContext({}),u=function(e){var t=a.a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):b({},t,{},e)),r},p=function(e){var t=u(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},i={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=Object(n.forwardRef)((function(e,t){var r=e.components,n=e.mdxType,c=e.originalType,l=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=u(r),d=n,O=p["".concat(l,".").concat(d)]||p[d]||i[d]||c;return r?a.a.createElement(O,b({ref:t},s,{components:r})):a.a.createElement(O,b({ref:t},s))}));function O(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=r.length,l=new Array(c);l[0]=d;var b={};for(var o in t)hasOwnProperty.call(t,o)&&(b[o]=t[o]);b.originalType=e,b.mdxType="string"==typeof e?e:n,l[1]=b;for(var s=2;s<c;s++)l[s]=r[s];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"}}]);