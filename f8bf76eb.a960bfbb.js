(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{162:function(e,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return o})),t.d(r,"metadata",(function(){return s})),t.d(r,"rightToc",(function(){return l})),t.d(r,"default",(function(){return i}));var n=t(1),a=t(6),c=(t(0),t(169)),o={id:"usequery",title:"useQuery",sidebar_label:"useQuery"},s={id:"resources/graphql/usequery",title:"useQuery",description:"**useQuery** hook to send GraphQL request",source:"@site/docs/resources/graphql/useQuery.md",permalink:"/bones/docs/resources/graphql/usequery",editUrl:"https://github.com/alexgul4enko/bones/tree/master/docs/docs/resources/graphql/useQuery.md",sidebar_label:"useQuery",sidebar:"resourcesSitebar",previous:{title:"withInfinityList",permalink:"/bones/docs/resources/resource_withInfinityList"},next:{title:"usePrefetchQuery",permalink:"/bones/docs/resources/graphql/usePrefetchQuery"}},l=[{value:"query",id:"query",children:[]},{value:"options",id:"options",children:[{value:"reducer",id:"reducer",children:[]},{value:"namespace",id:"namespace",children:[]},{value:"queries",id:"queries",children:[]},{value:"parseValue",id:"parsevalue",children:[]},{value:"parseErrors",id:"parseerrors",children:[]}]}],u={rightToc:l};function i(e){var r=e.components,t=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},u,t,{components:r,mdxType:"MDXLayout"}),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"useQuery")," hook to send GraphQL request"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"useQuery(query, options)\n")),Object(c.b)("h2",{id:"query"},"query"),Object(c.b)("p",null,"GraphQL query "),Object(c.b)("p",null,"To define GraphQL query create ",Object(c.b)("inlineCode",{parentName:"p"},"graphql")," file."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql",metastring:'title="dogs.graphql"',title:'"dogs.graphql"'}),"query Dogs {\n    dogs {\n      id\n      breed\n    }\n  }\n")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"import DOGS from './dogs.graphql'\nimport { useQuery } from '@cranium/resource'\n\nfunction Dogs(){\n   const { request, data, isLoading, errors, filters } = useQuery(DOGS)\n}\n")),Object(c.b)("h2",{id:"options"},"options"),Object(c.b)("p",null,"Object with additional configurations"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Property"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"type"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"reducer"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"namespace"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"forceUpdates"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"boolean")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"destroyOnUnmount"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"boolean")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"queries"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Array","[String]")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"parseErrors"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string or function")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"parseValue"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"string or function")))),Object(c.b)("h3",{id:"reducer"},"reducer"),Object(c.b)("p",null,"Function that will be called in redux reducer. Default 'replace'. By default connect resources has already defined 4 types of most reusable reducers. And you may use it as a String. ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/resources/connect_resource_type#reducer"}),"More info")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"import DOGS from './dogs.graphql'\nimport { useQuery } from '@cranium/resource'\n\nfunction Dogs(){\n   const { request, data, isLoading, errors, filters } = useQuery(DOGS, { reducer: 'none' })\n}\n")),Object(c.b)("h3",{id:"namespace"},"namespace"),Object(c.b)("p",null,"By default namespace will be used as query name (camellCased) "),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"query Dogs {\n    dogs {\n      id\n      breed\n    }\n  }\n")),Object(c.b)("p",null,"In this case ",Object(c.b)("inlineCode",{parentName:"p"},"namespace")," is ",Object(c.b)("inlineCode",{parentName:"p"},"dogs")),Object(c.b)("h3",{id:"queries"},"queries"),Object(c.b)("p",null,"By default queries will be automatically generated from graphql"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"query Dogs ($first: Int, $cursor: String ) {\n    dogs {\n        edges {\n            node {\n                id\n                breed \n            }\n        }\n    }\n  }\n")),Object(c.b)("p",null,"In this case it will automatically generate ",Object(c.b)("inlineCode",{parentName:"p"},"queries")," as ",Object(c.b)("inlineCode",{parentName:"p"},'["first","cursor"]'),". And then you can use this values from ",Object(c.b)("inlineCode",{parentName:"p"},"filters")),Object(c.b)("h3",{id:"parsevalue"},"parseValue"),Object(c.b)("p",null,"In case "),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"query Dogs ($first: Int, $cursor: String ) {\n    dogs {\n        edges {\n            node {\n                id\n                breed \n            }\n        }\n    }\n  }\n")),Object(c.b)("p",null,"GraphQl response in most cases has lot of nesting. To make data more simple, you can use parseValue option.\nIn case ",Object(c.b)("inlineCode",{parentName:"p"},"parseValue")," is ",Object(c.b)("inlineCode",{parentName:"p"},"String")," it will just use ",Object(c.b)("inlineCode",{parentName:"p"},"lodash.get")," function to remove root nesting from graphQL response"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"import DOGS from './dogs.graphql'\nimport { useQuery } from '@cranium/resource'\n\nfunction Dogs(){\n   const { request, data } = useQuery(DOGS, {parseValue: 'data.dogs'})\n   ...\n}\n\nfunction Dogs(){\n   const { request, data } = useQuery(DOGS, {parseValue: (resp=> get(resp, 'data.dogs.edges'))})\n   ...\n}\n")),Object(c.b)("h3",{id:"parseerrors"},"parseErrors"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"parseErrors")," has same API as ",Object(c.b)("inlineCode",{parentName:"p"},"parseValue"),". And this function executes before ",Object(c.b)("inlineCode",{parentName:"p"},"parseValue"),". It could be string or function and in general it is needed to convert GraphQL response (that is always success) to error. This function could be useful while working with forms."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"import DOGS from './dogs.graphql'\nimport { useQuery } from '@cranium/resource'\n\nfunction parseErrors (data) {\n  if(has(data, 'data.errors')) {\n    return get(data, 'data.errors.edges')\n  }\n} \n\nfunction Dogs(){\n   const { request, data } = useQuery(DOGS, { parseErrors })\n   ...\n}\n")))}i.isMDXComponent=!0},169:function(e,r,t){"use strict";t.d(r,"a",(function(){return b})),t.d(r,"b",(function(){return O}));var n=t(0),a=t.n(n);function c(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){c(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=a.a.createContext({}),i=function(e){var r=a.a.useContext(u),t=r;return e&&(t="function"==typeof e?e(r):s({},r,{},e)),t},b=function(e){var r=i(e.components);return a.a.createElement(u.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return a.a.createElement(a.a.Fragment,{},r)}},d=Object(n.forwardRef)((function(e,r){var t=e.components,n=e.mdxType,c=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),b=i(t),d=n,O=b["".concat(o,".").concat(d)]||b[d]||p[d]||c;return t?a.a.createElement(O,s({ref:r},u,{components:t})):a.a.createElement(O,s({ref:r},u))}));function O(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var c=t.length,o=new Array(c);o[0]=d;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var u=2;u<c;u++)o[u]=t[u];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);