(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{158:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",(function(){return o})),t.d(e,"metadata",(function(){return s})),t.d(e,"rightToc",(function(){return c})),t.d(e,"default",(function(){return g}));var r=t(1),a=t(6),i=(t(0),t(169)),o={id:"i18n_crowdin",title:"Integration with Crowdin",sidebar_label:"Integration with Crowdin"},s={id:"i18n/i18n_crowdin",title:"Integration with Crowdin",description:"![crowdin](/bones/img/crowdin.png)",source:"@site/docs/i18n/crowdin-integration.md",permalink:"/bones/docs/i18n/i18n_crowdin",editUrl:"https://github.com/alexgul4enko/bones/tree/master/docs/docs/i18n/crowdin-integration.md",sidebar_label:"Integration with Crowdin",sidebar:"i18nSitebar",previous:{title:"i18n",permalink:"/bones/docs/i18n/i18n_about"}},c=[{value:"1. Extract string from Code",id:"1-extract-string-from-code",children:[]},{value:"2. Configure Crowdin",id:"2-configure-crowdin",children:[]},{value:"3. Publish your files to Crowdin",id:"3-publish-your-files-to-crowdin",children:[]},{value:"4. Setup Client integration",id:"4-setup-client-integration",children:[]},{value:"Setup in-app translations",id:"setup-in-app-translations",children:[]}],l={rightToc:c};function g(n){var e=n.components,t=Object(a.a)(n,["components"]);return Object(i.b)("wrapper",Object(r.a)({},l,t,{components:e,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("img",Object(r.a)({parentName:"p"},{src:"/bones/img/crowdin.png",alt:"crowdin"}))),Object(i.b)("p",null,"There are few steps to integrate with Crowdin:"),Object(i.b)("h2",{id:"1-extract-string-from-code"},"1. Extract string from Code"),Object(i.b)("p",null,"To  extract string from code you can use ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.npmjs.com/package/react-gettext-parser"}),"react-gettext-parser")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js",metastring:'title="extractStrings.js"',title:'"extractStrings.js"'}),"\nconst { extractMessagesFromGlob } = require ('react-gettext-parser')\n\n\nconst fs = require('fs')\nconst messages = extractMessagesFromGlob(['src/**/{*.js,*.jsx,*.ts,*.tsx}'], {\n      funcArgumentsMap: {\n          gettext: ['msgid'],\n          pgettext: ['msgctxt', 'msgid'],\n          ngettext: ['msgid', 'msgid_plural'],\n          npgettext: ['msgctxt', 'msgid_plural', 'msgid'],\n      }\n});\n\nconst msg = messages.reduce((res,msg)=>{\n    const transl = msg.msgid_plural ? {\n        [msg.msgid]: msg.msgctxt || msg.msgid,\n        [`${msg.msgid}_other`]: msg.msgid_plural\n    } : {\n         [msg.msgid]: msg.msgctxt || msg.msgid,\n    }\n    return {\n        ...res,\n        ...transl\n    }\n},{})\n\n\nfs.writeFileSync( './translations.json', JSON.stringify(msg,null, 2))\n")),Object(i.b)("h2",{id:"2-configure-crowdin"},"2. Configure Crowdin"),Object(i.b)("p",null,"To configure Crowdin you need to create ",Object(i.b)("del",{parentName:"p"},"crowdin.yml")," file.\nYou can read more ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://developer.crowdin.com/configuration-file/"}),"here")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yaml",metastring:'title="crowdin.yml"',title:'"crowdin.yml"'}),'"project_id": "your project id"\n"api_token": "your api token"\n"base_path": "."                        # path to your project directory on a local machine\n"base_url": "https://api.crowdin.com"       # https://{organization-name}.crowdin.com for Crowdin Enterprise\n"preserve_hierarchy": true\n\n"files": [\n  {\n      "source": "translations.json",   \n      "translation": "/trans_%two_letters_code%.json",\n      "type": "i18next_json"   # set i18next_json format\n  },\n]\n\n')),Object(i.b)("h2",{id:"3-publish-your-files-to-crowdin"},"3. Publish your files to Crowdin"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js",metastring:'title="extractStrings.js" {2,30}',title:'"extractStrings.js"',"{2,30}":!0}),"const { extractMessagesFromGlob } = require ('react-gettext-parser')\nconst { spawnSync } = require('child_process')\n\nconst fs = require('fs')\nconst messages = extractMessagesFromGlob(['src/**/{*.js,*.jsx,*.ts,*.tsx}'], {\n      funcArgumentsMap: {\n          gettext: ['msgid'],\n          pgettext: ['msgctxt', 'msgid'],\n          ngettext: ['msgid', 'msgid_plural'],\n          npgettext: ['msgctxt', 'msgid_plural', 'msgid'],\n      }\n});\n\nconst msg = messages.reduce((res,msg)=>{\n    const transl = msg.msgid_plural ? {\n        [msg.msgid]: msg.msgctxt || msg.msgid,\n        [`${msg.msgid}_other`]: msg.msgid_plural\n    } : {\n         [msg.msgid]: msg.msgctxt || msg.msgid,\n    }\n    return {\n        ...res,\n        ...transl\n    }\n},{})\n\n\nfs.writeFileSync( './translations.json', JSON.stringify(msg,null, 2))\n\nspawnSync('npx', ['crowdin', 'upload', 'sources'], { stdio: 'inherit' })\n")),Object(i.b)("h2",{id:"4-setup-client-integration"},"4. Setup Client integration"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"import { TranslateProvider } from '@cranium/i18n'\nimport otaClient from '@crowdin/ota-client';\n\nconst client = new otaClient('your hash');\n\nfunction getTranslation(lang?:string) {\n  return client.getStringsByLocale(undefined, lang)\n}\n\nconst MyApp: FC = ({ children }) => {\n  return (\n    <TranslateProvider\n      storage={localStorage}\n      langKey='lang'\n      translationsKey='translations'\n      getTranslation={getTranslation}\n      defaultLanguage={window.navigator.language}\n      monoLanguageJSON\n    >\n      {children}\n   </TranslateProvider>\n  );\n}\n\n")),Object(i.b)("h2",{id:"setup-in-app-translations"},"Setup in-app translations"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"import { TranslateProvider } from '@cranium/i18n'\nimport otaClient from '@crowdin/ota-client';\n\nconst client = new otaClient('your hash');\n\nfunction getTranslation(lang?:string) {\n  return client.getStringsByLocale(undefined, lang)\n}\n\nconst isInApp =  window.localStorage.getItem('in-app') === 'true'\n\nconst MyApp: FC = ({ children }) => {\n  return (\n    <TranslateProvider\n      storage={localStorage}\n      langKey='lang'\n      translationsKey='translations'\n      getTranslation={getTranslation}\n      defaultLanguage={isInApp ? 'ach' : window.navigator.language}\n      useDefaultLanguage={isInApp}\n      monoLanguageJSON\n    >\n      <InAppTranslate/>\n      {children}\n   </TranslateProvider>\n  );\n}\n\n//init in-app translations\nif(isInApp) {\n  const script = document.createElement('script');\n  script.setAttribute('type', 'text/javascript')\n  script.setAttribute('src', '//cdn.crowdin.com/jipt/jipt.js')\n  //@ts-ignore sd\n  window._jipt = []\n  //@ts-ignore sd\n  window._jipt.push(['project', 'asdasdw']);\n  document.head.appendChild(script)\n}\n\n//Component to toggle in-app translations\nexport const InAppTranslate:FC = () => {\n  const handleChange = useCallback(()=>{\n    window.localStorage.setItem('in-app', !isInApp ? 'true' : 'false')\n    window.location.reload()\n  },[])\n  \n  return (\n    <Switch onChange={handleChange} defaultChecked={isInApp} />\n  )\n}\n\n")))}g.isMDXComponent=!0},169:function(n,e,t){"use strict";t.d(e,"a",(function(){return p})),t.d(e,"b",(function(){return m}));var r=t(0),a=t.n(r);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var l=a.a.createContext({}),g=function(n){var e=a.a.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):s({},e,{},n)),t},p=function(n){var e=g(n.components);return a.a.createElement(l.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return a.a.createElement(a.a.Fragment,{},e)}},u=Object(r.forwardRef)((function(n,e){var t=n.components,r=n.mdxType,i=n.originalType,o=n.parentName,l=c(n,["components","mdxType","originalType","parentName"]),p=g(t),u=r,m=p["".concat(o,".").concat(u)]||p[u]||d[u]||i;return t?a.a.createElement(m,s({ref:e},l,{components:t})):a.a.createElement(m,s({ref:e},l))}));function m(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var i=t.length,o=new Array(i);o[0]=u;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=n,s.mdxType="string"==typeof n?n:r,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);